from fastapi import FastAPI, Request, HTTPException
import requests
import os
from typing import Dict, Any

app = FastAPI()

# тЬЕ Environment Variables
BOT_TOKEN = os.getenv("BOT_TOKEN")
TARGET_CHAT_ID = os.getenv("TARGET_CHAT_ID")  # рдЬрд╣рд╛рдВ рдореИрд╕реЗрдЬ рдлреЙрд░рд╡рд░реНрдб рдХрд░рдирд╛ рд╣реИ

# тЬЕ Root endpoint
@app.get("/")
def read_root():
    return {"status": "active", "service": "Telegram Bot Webhook"}

# тЬЕ Webhook handler with proper message processing
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data: Dict[str, Any] = await request.json()
        print("Received update:", data)

        # рд╕рд┐рд░реНрдл рдореИрд╕реЗрдЬ рдЕрдкрдбреЗрдЯ рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ
        if "message" in data:
            message = data["message"]
            chat_id = message["chat"]["id"]
            text = message.get("text", "")
            
            # /start рдХрдорд╛рдВрдб рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд░рд┐рд╕реНрдкреЙрдиреНрд╕
            if text.startswith("/start"):
                response_text = "ЁЯЪА LR Saathi Bot рдЖрдкрдХреА рд╕реЗрд╡рд╛ рдореЗрдВ!\n\nрдореИрд╕реЗрдЬ рднреЗрдЬреЗрдВ рдФрд░ рд╡рд╣ рдЖрдкрдХреЗ рдЧреНрд░реБрдк рдореЗрдВ рдлреЙрд░рд╡рд░реНрдб рд╣реЛ рдЬрд╛рдПрдЧрд╛ред"
            else:
                # рдореВрд▓ рдкреНрд░реЗрд╖рдХ рдХреА рдЬрд╛рдирдХрд╛рд░реА
                sender_name = message["from"].get("first_name", "User")
                
                # рдЯрд╛рд░реНрдЧреЗрдЯ рдЪреИрдЯ рдореЗрдВ рдореИрд╕реЗрдЬ рдлреЙрд░рд╡рд░реНрдб рдХрд░реЗрдВ
                if TARGET_CHAT_ID and text:
                    forward_text = f"ЁЯУй рдирдпрд╛ рд╕рдВрджреЗрд╢ ({sender_name}): {text}"
                    send_telegram_message(TARGET_CHAT_ID, forward_text)
                
                response_text = f"тЬФя╕П рдЖрдкрдХрд╛ рд╕рдВрджреЗрд╢ рдкреНрд░рд╛рдкреНрдд рд╣реБрдЖ: {text[:50]}..."

            # рдпреВрдЬрд░ рдХреЛ рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рднреЗрдЬреЗрдВ
            send_telegram_message(chat_id, response_text)

        return {"status": "processed"}
    
    except Exception as e:
        print(f"Error processing update: {e}")
        raise HTTPException(status_code=400, detail=str(e))

# тЬЕ Telegram рдореИрд╕реЗрдЬ рднреЗрдЬрдиреЗ рдХреЗ рд▓рд┐рдП рд╣реЗрд▓реНрдкрд░ рдлрдВрдХреНрд╢рди
def send_telegram_message(chat_id: str, text: str):
    if not BOT_TOKEN:
        print("Error: BOT_TOKEN not configured")
        return
        
    url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": text,
        "parse_mode": "HTML"
    }
    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()
        print("Message sent successfully")
        return response.json()
    except requests.exceptions.RequestException as e:
        print(f"Failed to send message: {e}")

# тЬЕ рдЯреЗрд╕реНрдЯ рдПрдВрдбрдкреЙрдЗрдВрдЯ
@app.get("/test")
def test_endpoint():
    test_message = "ЁЯЯв рдмреЙрдЯ рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдХрд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реИ!\n\nServer Time: " + str(datetime.now())
    
    if TARGET_CHAT_ID:
        send_telegram_message(TARGET_CHAT_ID, test_message)
        return {"status": "test_message_sent"}
    return {"status": "chat_id_not_configured"}
