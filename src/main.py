import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# ------------------- рдХреЙрдиреНрдлрд┐рдЧрд░реЗрд╢рди -------------------
BOT_TOKEN = "8386503951:AAFcvtXMmvJSQ-3rMB78lGAEjypb6yYuEN4"  # рдпрд╣рд╛рдВ рдЖрдкрдХрд╛ рдЯреЛрдХрди
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = "https://your-app-name.onrender.com"  # рдЕрдкрдирд╛ Render URL рдбрд╛рд▓реЗрдВ

# рд▓реЙрдЧрд┐рдВрдЧ рд╕реЗрдЯрдЕрдк
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------------- рдореЗрдиреВ рд╕реНрдЯреНрд░рдХреНрдЪрд░ -------------------
MENUS = {
    "main": {
        "text": "ЁЯУК **LR Saathi Trading Terminal**\n\nрдХреНрдпрд╛ рдЪреЗрдХ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?",
        "buttons": [
            [("рдХреНрд░рд┐рдкреНрдЯреЛ ЁЯкЩ", "crypto"), ("рдЗрдВрдбреЗрдХреНрд╕ ЁЯУИ", "indices")],
            [("рд╕реНрдЯреЙрдХреНрд╕ ЁЯТ╝", "stocks"), ("рдСрдкреНрд╢рди рдЪреЗрди ЁЯУК", "option_chain")],
            [("рдЕрд▓рд░реНрдЯ тП░", "alerts"), ("рд╣реЗрд▓реНрдк тЭУ", "help")]
        ]
    },
    "crypto": {
        "text": "ЁЯТ░ **рдХреНрд░рд┐рдкреНрдЯреЛ рдорд╛рд░реНрдХреЗрдЯ**\n\nрдХреМрдирд╕рд╛ рдХреЙрдЗрди рдЪреЗрдХ рдХрд░реЗрдВ?",
        "buttons": [
            [("BTC/USDT", "crypto_btc"), ("ETH/USDT", "crypto_eth")],
            [("рд╡рд╛рдкрд╕ тЖйя╕П", "back")]
        ]
    }
}

# ------------------- рдХреАрдмреЛрд░реНрдб рдмрдирд╛рдиреЗ рдХреА рдлрдВрдХреНрд╢рди -------------------
def create_keyboard(menu_name):
    keyboard = []
    for button_row in MENUS[menu_name]["buttons"]:
        row = []
        for btn_text, btn_data in button_row:
            row.append(InlineKeyboardButton(btn_text, callback_data=btn_data))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

# ------------------- рдХрдорд╛рдВрдб рд╣реИрдВрдбрд▓рд░реНрд╕ -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        MENUS["main"]["text"],
        reply_markup=create_keyboard("main"),
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_msg = """
    ЁЯЖШ **LR Saathi Bot Help:**

    /start - рдореБрдЦреНрдп рдореЗрдиреВ рджрд┐рдЦрд╛рдПрдВ
    /alerts - рдирдП рдЕрд▓рд░реНрдЯ рд╕реЗрдЯ рдХрд░реЗрдВ
    /analysis - рдорд╛рд░реНрдХреЗрдЯ рдПрдирд╛рд▓рд┐рд╕рд┐рд╕
    """
    await update.message.reply_text(help_msg, parse_mode="Markdown")

# ------------------- рдмрдЯрди рдХреНрд▓рд┐рдХ рд╣реИрдВрдбрд▓рд░ -------------------
async def button_click(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "back":
        await start(update, context)
    elif query.data in MENUS:
        await query.edit_message_text(
            MENUS[query.data]["text"],
            reply_markup=create_keyboard(query.data),
            parse_mode="Markdown"
        )
    else:
        await handle_market_action(query)

async def handle_market_action(query):
    action = query.data
    if "crypto_" in action:
        symbol = action.split("_")[1].upper()
        await query.edit_message_text(f"ЁЯФД {symbol} рдХрд╛ рдбреЗрдЯрд╛ рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...")
        # рдпрд╣рд╛рдВ API рдХреЙрд▓ рдЬреЛрдбрд╝реЗрдВ
        await query.edit_message_text(f"ЁЯУК {symbol} рдХреА рдХреАрдордд: $42,000\n24h Change: +2.5%")

# ------------------- рдореИрд╕реЗрдЬ рд╣реИрдВрдбрд▓рд░ -------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    
    if "price" in text:
        await update.message.reply_text("ЁЯТ╡ рдХрд┐рд╕рдХрд╛ рдкреНрд░рд╛рдЗрд╕ рдЪреЗрдХ рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ?")
    elif "alert" in text:
        await update.message.reply_text("ЁЯФФ рдирдпрд╛ рдЕрд▓рд░реНрдЯ рд╕реЗрдЯ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП /alerts рдЯрд╛рдЗрдк рдХрд░реЗрдВ")
    else:
        await update.message.reply_text("рдореИрдВ рд╕рдордЭрд╛ рдирд╣реАрдВ, рдХреГрдкрдпрд╛ рдореЗрдиреВ рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ")

# ------------------- рдореБрдЦреНрдп рдПрдкреНрд▓реАрдХреЗрд╢рди -------------------
def main():
    # рдмреЙрдЯ рдЗрдирд┐рд╢рд┐рдпрд▓рд╛рдЗрдЬрд╝реЗрд╢рди
    app = Application.builder().token(BOT_TOKEN).build()
    
    # рд╣реИрдВрдбрд▓рд░реНрд╕ рдЬреЛрдбрд╝реЗрдВ
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(button_click))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # рдбрд┐рдкреНрд▓реЙрдпрдореЗрдВрдЯ рдореЛрдб
    if os.environ.get('RENDER'):
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL,
            secret_token="WEBHOOK_SECRET"
        )
        logger.info("WEBHOOK рдореЛрдб рдореЗрдВ рдЪрд▓ рд░рд╣рд╛ рд╣реИ")
    else:
        app.run_polling()
        logger.info("POLLING рдореЛрдб рдореЗрдВ рдЪрд▓ рд░рд╣рд╛ рд╣реИ")

if __name__ == "__main__":
    main()
