import os
import logging
import asyncio
import uvicorn
from dotenv import load_dotenv
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler
from fastapi import FastAPI, Request
from datetime import datetime
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)

# ------------------- ‡§ï‡•â‡§®‡•ç‡§´‡§ø‡§ó‡§∞‡•á‡§∂‡§® -------------------
BOT_TOKEN = "8386503951:AAEs30I2Jl3acAD38Ipq_zFknjk8HOezUL4"  # ‚úÖ ‡§Ü‡§™‡§ï‡§æ ‡§ü‡•ã‡§ï‡§® ‡§Ø‡§π‡•Ä ‡§∞‡§π‡•á‡§ó‡§æ
PORT = int(os.environ.get('PORT', 10000))
WEBHOOK_URL = "https://lr-saathi-bot.onrender.com"  # ‚úÖ Render ‡§ï‡§æ URL

# ‡§≤‡•â‡§ó‡§ø‡§Ç‡§ó ‡§∏‡•á‡§ü‡§Ö‡§™
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ------------------- ‡§Æ‡•á‡§®‡•Ç ‡§∏‡•ç‡§ü‡•ç‡§∞‡§ï‡•ç‡§ö‡§∞ -------------------
MENUS = {
    "main": {
        "text": "üìä **LR Saathi Trading Terminal**\n\n‡§ï‡•ç‡§Ø‡§æ ‡§ö‡•á‡§ï ‡§ï‡§∞‡§®‡§æ ‡§ö‡§æ‡§π‡§§‡•á ‡§π‡•à‡§Ç?",
        "buttons": [
            [("‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•ã ü™ô", "crypto"), ("‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ üìà", "indices")],
            [("‡§∏‡•ç‡§ü‡•â‡§ï‡•ç‡§∏ üíº", "stocks"), ("‡§ë‡§™‡•ç‡§∂‡§® ‡§ö‡•á‡§® üìä", "option_chain")],
            [("‡§Ö‡§≤‡§∞‡•ç‡§ü ‚è∞", "alerts"), ("‡§π‡•á‡§≤‡•ç‡§™ ‚ùì", "help")]
        ]
    },
    "crypto": {
        "text": "üí∞ **‡§ï‡•ç‡§∞‡§ø‡§™‡•ç‡§ü‡•ã ‡§Æ‡§æ‡§∞‡•ç‡§ï‡•á‡§ü**\n\n‡§ï‡•å‡§®‡§∏‡§æ ‡§ï‡•â‡§á‡§® ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç?",
        "buttons": [
            [("BTC/USDT", "crypto_btc"), ("ETH/USDT", "crypto_eth"), ("BNB/USDT", "crypto_bnb")],
            [("‡§µ‡§æ‡§™‡§∏ ‚Ü©Ô∏è", "back")]
        ]
    },
    "indices": {
        "text": "üìà **‡§á‡§Ç‡§°‡§ø‡§Ø‡§® ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏**\n\n‡§ï‡•å‡§®‡§∏‡§æ ‡§á‡§Ç‡§°‡•á‡§ï‡•ç‡§∏ ‡§ö‡•á‡§ï ‡§ï‡§∞‡•á‡§Ç?",
        "buttons": [
            [("NIFTY 50", "indices_nifty"), ("BANK NIFTY", "indices_banknifty")],
            [("FINNIFTY", "indices_finnifty"), ("‡§µ‡§æ‡§™‡§∏ ‚Ü©Ô∏è", "back")]
        ]
    }
}

def create_keyboard(menu_name):
    keyboard = []
    for button_row in MENUS[menu_name]["buttons"]:
        row = []
        for btn_text, btn_data in button_row:
            row.append(InlineKeyboardButton(btn_text, callback_data=btn_data))
        keyboard.append(row)
    return InlineKeyboardMarkup(keyboard)

# ------------------- ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ -------------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        MENUS["main"]["text"],
        reply_markup=create_keyboard("main"),
        parse_mode="Markdown"
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_msg = """
    üÜò **LR Saathi Bot Commands:**

    /start - ‡§Æ‡•Å‡§ñ‡•ç‡§Ø ‡§Æ‡•á‡§®‡•Ç
    /alerts - ‡§®‡§è ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç
    /analysis - ‡§ü‡•á‡§ï‡•ç‡§®‡§ø‡§ï‡§≤ ‡§è‡§®‡§æ‡§≤‡§ø‡§∏‡§ø‡§∏
    """
    await update.message.reply_text(help_msg, parse_mode="Markdown")

# ------------------- ‡§¨‡§ü‡§® ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏ -------------------
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "back":
        await start(update, context)
    elif query.data in MENUS:
        await query.edit_message_text(
            MENUS[query.data]["text"],
            reply_markup=create_keyboard(query.data),
            parse_mode="Markdown"
        )
    elif "_" in query.data:
        category, symbol = query.data.split("_")
        await query.edit_message_text(f"‚è≥ {symbol.upper()} ‡§ï‡§æ ‡§°‡•á‡§ü‡§æ ‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...")
        await asyncio.sleep(1)  # ‚úÖ ‡§•‡•ã‡§°‡§º‡§æ ‡§ü‡§æ‡§á‡§Æ ‡§¶‡•á‡§Ç ‡§≤‡•ã‡§°‡§ø‡§Ç‡§ó ‡§¶‡§ø‡§ñ‡§æ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è

        # ‡§°‡§Æ‡•Ä ‡§°‡•á‡§ü‡§æ (‡§¨‡§æ‡§¶ ‡§Æ‡•á‡§Ç ‡§∞‡§ø‡§Ø‡§≤ ‡§ü‡§æ‡§á‡§Æ API ‡§∏‡•á ‡§ú‡•ã‡§°‡§º ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç)
        price = "42000" if symbol == "btc" else "2500"
        await query.edit_message_text(
            f"üìà {symbol.upper()} ‡§ï‡•Ä‡§Æ‡§§: ${price}\n"
            f"24h Change: +2.5%\n\n"
            f"üîÑ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§Ö‡§™‡§°‡•á‡§ü: {datetime.now().strftime('%H:%M:%S')}",
            reply_markup=create_keyboard(category)
        )

# ------------------- ‡§Æ‡•à‡§∏‡•á‡§ú ‡§π‡•à‡§Ç‡§°‡§≤‡§∞ -------------------
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.lower()
    if "price" in text:
        await update.message.reply_text("üíµ ‡§Æ‡•á‡§®‡•Ç ‡§∏‡•á ‡§∏‡§ø‡§Ç‡§¨‡§≤ ‡§ö‡•Å‡§®‡•á‡§Ç", reply_markup=create_keyboard("main"))
    elif "alert" in text:
        await update.message.reply_text("üîî /alerts ‡§ü‡§æ‡§á‡§™ ‡§ï‡§∞‡§ï‡•á ‡§®‡§Ø‡§æ ‡§Ö‡§≤‡§∞‡•ç‡§ü ‡§∏‡•á‡§ü ‡§ï‡§∞‡•á‡§Ç")
    else:
        await update.message.reply_text("‡§ï‡•É‡§™‡§Ø‡§æ ‡§Æ‡•á‡§®‡•Ç ‡§¨‡§ü‡§® ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç", reply_markup=create_keyboard("main"))

# ------------------- ‡§∞‡§® ‡§è‡§™‡•ç‡§≤‡§ø‡§ï‡•á‡§∂‡§® -------------------
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # ‡§π‡•à‡§Ç‡§°‡§≤‡§∞‡•ç‡§∏
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    # Render ‡§Ø‡§æ local deployment
    if os.environ.get('RENDER'):
        app.run_webhook(
            listen="0.0.0.0",
            port=PORT,
            webhook_url=WEBHOOK_URL,
            secret_token="lrsaathisecret"  # ‚úÖ ‡§ö‡§æ‡§π‡•á ‡§§‡•ã .env ‡§∏‡•á ‡§≤‡•á‡§Ç ‡§Ø‡§æ hardcoded ‡§∞‡§π‡§®‡•á ‡§¶‡•á‡§Ç
        )
    else:
        app.run_polling()

if __name__ == "__main__":
    main()
